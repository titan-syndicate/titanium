name: Release Candidate

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release-candidate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Get latest release
        id: get_latest
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          LATEST=$(gh release list --limit 1 --exclude-drafts --exclude-prereleases | awk '{print $1}')
          if [ -z "$LATEST" ]; then
            LATEST="v0.0.0"
          fi
          echo "latest_release=$LATEST" >> $GITHUB_OUTPUT

      - name: Create RC tag and prerelease
        id: create_rc
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get short commit hash
          COMMIT_HASH=$(git rev-parse --short HEAD)

          # Create RC tag (using proper semver format)
          RC_TAG="${LATEST}+rc.${COMMIT_HASH}"

          # Create prerelease
          gh release create "$RC_TAG" \
            --prerelease \
            --title "Release Candidate $RC_TAG" \
            --notes "Automated release candidate for commit $COMMIT_HASH"

          echo "rc_tag=$RC_TAG" >> $GITHUB_OUTPUT

      - name: Checkout with tag
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.create_rc.outputs.rc_tag }}
          fetch-depth: 0

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          args: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}