name: Release Candidate

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_increment:
        description: 'Version increment type'
        required: false
        type: choice
        options:
          - major
          - minor
          - patch
      commit_hash:
        description: 'Specific commit hash to use (optional)'
        required: false
        type: string
      skip_prerelease:
        description: 'Skip prerelease flag and hash in filenames'
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release-candidate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Get and increment latest version
        id: version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get latest release using GitHub API
          LATEST=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/titan-syndicate/titanium/releases/latest" | \
            jq -r '.tag_name')

          if [ "$LATEST" = "null" ] || [ -z "$LATEST" ]; then
            LATEST="v0.0.0"
          fi
          echo "Found latest release: $LATEST"

          # Remove 'v' prefix and split into parts
          VERSION=${LATEST#v}
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)

          # Increment based on input or default to patch
          INCREMENT_TYPE="${{ github.event.inputs.version_increment }}"
          if [ "$INCREMENT_TYPE" = "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$INCREMENT_TYPE" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          # Create new version
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "Creating new version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create RC tag and prerelease
        id: create_rc
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get commit hash (either from input or github.sha)
          COMMIT_HASH="${{ github.event.inputs.commit_hash || github.sha }}"
          COMMIT_HASH=$(echo $COMMIT_HASH | cut -c1-7)  # Get short hash

          # Create tag based on skip_prerelease flag
          SKIP_PRERELEASE="${{ github.event.inputs.skip_prerelease }}"
          if [ "$SKIP_PRERELEASE" = "true" ]; then
            TAG="${{ steps.version.outputs.new_version }}"
            PRERELEASE_FLAG=""
          else
            TAG="${{ steps.version.outputs.new_version }}-rc.${COMMIT_HASH}"
            PRERELEASE_FLAG="--prerelease"
          fi

          # Create release
          gh release create "$TAG" \
            $PRERELEASE_FLAG \
            --title "Release $TAG" \
            --notes "Release for commit $COMMIT_HASH"

          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT

      - name: Checkout with tag
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.create_rc.outputs.tag }}
          fetch-depth: 0

      - name: Run GoReleaser
        id: goreleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          args: release
          distribution: goreleaser-pro
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKERHUB_PAT: ${{ secrets.DOCKER_PAT }}
          # Add skip_prerelease flag to GoReleaser if needed
          SKIP_PRERELEASE: ${{ github.event.inputs.skip_prerelease }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_PRO_KEY }}

      - name: Ensure prerelease status
        if: ${{ github.event.inputs.skip_prerelease != 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release edit "${{ steps.create_rc.outputs.tag }}" --prerelease

      - name: Create workflow summary
        if: success()
        run: |
          echo "## Release Candidate Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Version Information" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ steps.create_rc.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ steps.create_rc.outputs.commit_hash }}" >> $GITHUB_STEP_SUMMARY
          echo "- Type: ${{ github.event.inputs.skip_prerelease == 'true' && 'Release' || 'Release Candidate' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "The following artifacts were created:" >> $GITHUB_STEP_SUMMARY
          echo "- Binary archives for multiple platforms" >> $GITHUB_STEP_SUMMARY
          echo "- Checksums for all artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Notes" >> $GITHUB_STEP_SUMMARY
          echo "Release notes and download links are available in the [GitHub Release](https://github.com/titan-syndicate/titanium/releases/tag/${{ steps.create_rc.outputs.tag }})" >> $GITHUB_STEP_SUMMARY